pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- enums

-- colors
c_black=0
c_darkblue=1
c_darkpurple=2
c_darkgreen=3
c_brown=4
c_darkgrey=5
c_lightgrey=6
c_white=7
c_red=8
c_orange=9
c_yellow=10
c_green=11
c_blue=12
c_indigo=13
c_pink=14
c_peach=15

-- darkened colors
drk = {
  [0]=0, -- black      -> black
  0,     -- darkblue   -> black
  1,     -- darkpurple -> darkblue
  1,     -- darkgreen  -> darkblue
  2,     -- brown      -> darkpurple
  1,     -- darkgrey   -> darkblue
  5,     -- lightgrey  -> darkgrey
  6,     -- white      -> lightgrey
  2,     -- red        -> darkpurple
  4,     -- orange     -> brown
  9,     -- yellow     -> orange
  3,     -- green      -> darkgreen
  1,     -- blue       -> darkblue
  1,     -- indigo     -> darkblue
  2,     -- pink       -> darkpurple
  5,     -- peach      -> darkgrey
}

-- buttons
b_left = 0
b_right = 1
b_up = 2
b_down = 3
b_o = 4
b_x = 5
b_pause = 6


-- sprite flags
flag_collision = 0
flag_portal = 1

-- memory locs

screen = 0x6000
shading_base = 0x4300




-->8
-- systems

-- https://github.com/eevee/klinklang/blob/23c5715bda87f3c787e1c5fe78f30443c7bf3f56/object.lua (modified)
_object = {}
_object.__index = _object

-- constructor
function _object:__call(...)
  local this = setmetatable({}, self)
  return this, this:init(...)
end

-- methods
function _object:init() end
function _object:update() end
function _object:draw() end

-- subclassing
function _object:extend()
  proto = {}

  -- copy meta values, since lua
  -- doesn't walk the prototype
  -- chain to find them
  for k, v in pairs(self) do
    if sub(k, 1, 2) == "__" then
      proto[k] = v
    end
  end

  proto.__index = proto
  proto.__super = self

  return setmetatable(proto, self)
end

function _method(h, k)
  return h[k] and h[k](h)
end

function _machine()
  local stack = {}

  function fire_up(ev)
    for i=1, #stack do
      _method(stack[i], ev)
    end
  end

  function fire_down(ev)
    for i=#stack, 1, -1 do
      if _method(stack[i], ev) then
        break
      end
    end
  end

  return {
    fire_up = fire_up,
    fire_down = fire_down,
    update = function() fire_down('update') end,
    draw = function() fire_up('draw') end,
    pop = function() stack[#stack] = nil end,
    push = function(k) add(stack, k) end,
  }
end

-->8
-- helpers
function flr8(v)
  return flr(v / 8)
end

function check_flag(x, y, flag)
  local cell_n = mget(flr8(x), flr8(y))
  return fget(cell_n, flag)
end

function check_collision(x, y)
  return check_flag(x, y, flag_collision)
end

function tprint(text, x, y, ic, oc)
  for ox=-1, 1 do
    for oy=-1, 1 do
      print(text, x + ox, y + oy, oc)
    end
  end

  print(text, x, y, ic)
end

-->8
-- entities

-- animations
_anim = _object:extend()

function _anim:init(frames)
  self.step = 0
  self.cur = 1
  self.frames = frames
end

function _anim:next()
  self.cur += 1
  if self.cur == #self.frames + 1 then
    self.cur = 1
  end

  return self.frames[self.cur]
end

function _anim:update()
  self.step += 1
  if (self.step % 3) == 0 then
    self:next()
  end

  return self.frames[self.cur]
end

function _anim:frame()
  return self.frames[self.cur]
end

function _anim:copy()
  return _anim(self.frames)
end

-- sprites
_sprite = _object:extend()

function _sprite:init(anims, palette)
  self.anims = anims
  self.palette = palette
  self.x = 0
  self.y = 0
end

function _sprite:draw()
  pal()
  if self.palette then
    self:palette()
  end

  spr(self.tile, self.x, self.y)
end

function _sprite:update()
  if self.anim then
    self.tile = self.anim:update()
  end
end

function _sprite:set_anim(to)
  self.anim = self.anims[to]
  if type(self.anim) == "number" then
    self.tile = self.anim
    self.anim = nil
  end
end

-- pixel explosions
function _splosion(sx, sy, tile, trans)
  local particles = {}
  local bx = (tile % 16) * 8
  local by = flr(tile / 16) * 8
  for x=0, 7 do
    for y=0, 7 do
      local c = sget(bx + x, by + y)
      if c ~= trans then
        add(particles, {
          x=x,
          y=y,
          dx=rnd(6) - 3,
          dy=rnd(6) - 3,
          c=c,
        })
      end
    end
  end

  return {
    draw = function()
      for ptcl in all(particles) do
        pset(sx + ptcl.x, sy + ptcl.y, ptcl.c)

        if check_collision(sx + ptcl.x + ptcl.dx, sy + ptcl.y) then
          ptcl.dx *= -1
        end
        if check_collision(sx + ptcl.x, sy + ptcl.y + ptcl.dy) then
          ptcl.dy *= -1
        end

        ptcl.x += ptcl.dx
        ptcl.y += ptcl.dy
        ptcl.dx *= 0.9
        ptcl.dy *= 0.9

        if (abs(ptcl.dx) < 0.1 and abs(ptcl.dy) < 0.1) then
          del(particles, ptcl)
        end
      end
    end,
  }
end

-- torch lighting
function set_light(l)
  if not l then
    light = 0
    light_sq = 0
    shade_factor = 0
    return
  end

  if l < 8 then
    l = 8
  end
  if l > 32 then
    l = 32
  end
  light = l
  light_sq = l * l / 2
  shade_factor = shl(8, flr(l / 8))
end

-->8
-- game config

hero_anims = {
  idle_down = 72,
  idle_up = 88,
  idle_right = 104,
  idle_left = 120,
  walk_down = _anim({72, 73, 72, 74}),
  walk_up = 88,
  walk_right = 104,
  walk_left = 120,
}

room_town = 9
room_d1_f1 = 1
room_d1_f2 = 2
room_d1_f3 = 3
room_d1_f4 = 4

room = room_town
rooms = {
  {x=0, y=0, light=32},
  {x=16, y=0, light=32},
  {x=32, y=0, light=32},
  {x=48, y=0, light=32,},
  [room_town] = {x=0, y=16},
}

set_light(rooms[room].light)

portals = {
  {x=8, y=31, to_x=1, to_y=4, to_room=room_d1_f1},
  {x=0, y=4, to_x=8, to_y=30, to_room=room_town},

  {x=10, y=10, to_x=27, to_y=10, to_room=room_d1_f2},
  {x=26, y=10, to_x=11, to_y=10, to_room=room_d1_f1},

  {x=24, y=10, to_x=40, to_y=9, to_room=room_d1_f3},
  {x=40, y=10, to_x=23, to_y=10, to_room=room_d1_f2},

  {x=40, y=15, to_x=56, to_y=14, to_room=room_d1_f4},
  {x=56, y=15, to_x=40, to_y=14, to_room=room_d1_f3},
}

-->8
-- game play

hero = _sprite(hero_anims, function() palt(c_black, false) palt(c_red, true) end)
hero.x = 60
hero.y = 188
hero:set_anim("walk_down")
hero.dir = "down"

camera_x, camera_y = 0, 0

function world()
  local splosions = {}

  return {
    update = function()
      if btn(b_left) then
        if not check_collision(hero.x - 1, hero.y) and not check_collision(hero.x - 1, hero.y + 7) then
          hero.x -= 1
        end
        hero:set_anim("walk_left")
        hero.dir = "left"
      elseif btn(b_right) then
        if not check_collision(hero.x + 8, hero.y) and not check_collision(hero.x + 8, hero.y + 7) then
          hero.x += 1
        end
        hero:set_anim("walk_right")
        hero.dir = "right"
      elseif btn(b_up) then
        if not check_collision(hero.x, hero.y - 1) and not check_collision(hero.x + 7, hero.y - 1) then
          hero.y -= 1
        end
        hero:set_anim("walk_up")
        hero.dir = "up"
      elseif btn(b_down) then
        if not check_collision(hero.x, hero.y + 8) and not check_collision(hero.x + 7, hero.y + 8) then
          hero.y += 1
        end
        hero:set_anim("walk_down")
        hero.dir = "down"
      else
        hero:set_anim("idle_" .. hero.dir)
      end

      if check_flag(hero.x + 4, hero.y + 4, flag_portal) then
        for portal in all(portals) do
          if portal.x == flr8(hero.x + 4) and portal.y == flr8(hero.y + 4) then
            game.push(fade_out(teleport(portal.to_x * 8, portal.to_y * 8, portal.to_room)))
            return true
          end
        end
      end

      if btnp(b_x) then
        add(splosions, _splosion(hero.x, hero.y, hero.tile, c_red))
      end

      hero:update()
    end,

    draw = function()
      cls()
      pal()
      local clip_x, clip_y, clip_s = nil, nil, nil

      if light > 0 then
        clip_x = min(127, max(0, hero.x - camera_x - light))
        clip_y = min(127, max(0, hero.y - camera_y - light))
        clip_s = light * 2 + 8
        clip(clip_x, clip_y, clip_s, clip_s)
      end

      local cur_room = rooms[room]
      local l = cur_room.x * 8
      local r = l + (cur_room.w or 16) * 8
      local t = cur_room.y * 8
      local b = t + (cur_room.h or 16) * 8

      camera_x, camera_y = max(l, min(hero.x - 60, r - 128)), max(t, min(hero.y - 60, b - 128))
      camera(camera_x, camera_y)
      map(0, 0, 0, 0, 128, 64)

      hero:draw()

      if light > 0 then
        local hx = camera_x - hero.x - 3
        local hy = camera_y - hero.y - 3
        local max_clip_x = min(63, (clip_x + clip_s) / 2)
        local max_clip_y = min(127, clip_y + clip_s)

        -- this doesn't perfectly shade horizontal pixels
        -- ...which normally isn't too much of an issue,
        -- except near the right edge it's hideous
        for x=clip_x / 2, max_clip_x  do
          local lsq = light_sq + rnd(16)
          for y=clip_y, max_clip_y do
            -- local addr = 0x6000 + x + y * 64
            local addr = bor(bor(0x6000, x), shl(y, 6))

            local dst_x = x * 2 + hx
            local dst_y = y + hy
            local dst_sq = dst_x * dst_x + dst_y * dst_y

            local shades = flr((dst_sq - lsq) / shade_factor)
            local shade_color = 0x00

            if shades < 5 then
              -- shading_table = shading_base + shades * 256
              local shading_table = shading_base + shl(shades, 8)
              local shading_addr = shading_table + peek(addr)
              shade_color = peek(shading_addr)
            end

            if shades > 0 then
              poke(addr, shade_color)
            end
          end
        end
      end

      for splosion in all(splosions) do
        splosion:draw()
      end

      clip()

      tprint(stat(7) .. 'fps', camera_x + 1, camera_y + 1, c_white, c_black)
      tprint('c' .. flr(stat(1) * 100) .. '%', camera_x + 28, camera_y + 1, c_white, c_black)
      tprint('m' .. flr(stat(2) / 20.48) .. '%', camera_x + 56, camera_y + 1, c_white, c_black)
    end,
  }
end

function menu()
  return {
    draw = function()
      rectfill(8, 8, 120, 120, c_lightgrey)
      rectfill(9, 9, 119, 119, c_darkblue)
    end,

    update = function()
      if btnp(4) or btnp(5) then
        game.pop()
      end
      return true
    end,
  }
end

function fade_out(next)
  local frame = 0
  local shades = {[0]=0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
  return {
    draw = function()
      for j=0, 15 do
        pal(j, shades[j], 1)
      end
    end,

    update = function()
      frame += 1

      for j=0, 15 do
        shades[j] = drk[shades[j]]
      end

      if frame == 6 then
        game.pop()
        game.push(next or fade_in())
      end

      return true
    end,
  }
end

function fade_in()
  local frame = 0
  local faded = 6

  return {
    draw = function()
      local shades = {[0]=0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
      for i=1, faded do
        for j=0, 15 do
          shades[j] = drk[shades[j]]
        end
      end

      for j=0, 15 do
        pal(j, shades[j], 1)
      end
    end,

    update = function()
      faded -= 1

      if faded == -1 then
        game.pop()
      end

      return true
    end,
  }
end

function teleport(to_x, to_y, to_room, next)
  return {
    draw = function()
      for j=0, 15 do
        pal(j, c_black, 1)
      end
    end,

    update = function()
      hero.x = to_x
      hero.y = to_y
      room = to_room
      set_light(rooms[to_room].light)
      game.pop()
      game.push(next or fade_in())
      return true
    end
  }
end

game = _machine()
game.push(world())

function _init()
  -- initialize shade colors
  for sh=0, 5 do
    local shades = {}

    for j=0, 15 do
      shades[j] = sget(8 + sh, 32 + j)
    end

    local shading_table = shading_base + shl(sh, 8)

    for x=0, 255 do
      local left_color = band(x, 0xf)
      local right_color = band(lshr(x, 4), 0xf)
      poke(bor(shading_table, x), shl(shades[right_color], 4) + shades[left_color])
    end
  end
end

function _draw() game.draw() end
function _update() game.update() end

__gfx__
00000000aa96090a055555559a999a9a1111111170000a090000007000000000006666003333300000003333333330000000000000003333aaaaa900009aaaaa
000000009a00090a50055555900000091111222260660a000944477700666b60067bb7603330044747400033333004444444444444400033aaa9900990099aaa
007007009aa60009555055550099990012220000006d00000994497006bc7bc6677bb7763304444474444403330444444444444444444403a9900997a990099a
00077000aa960a09555505550944444025550dd050dd0dd0449449746cbccbc66bbbbbb630444647474644403044444444444444444444409009977aaaa99009
00077000aa00090a555505550222222050000d5050000d504444447467bcccc66bbbbbb6304446744476444030444444444444444444444009977aaaaaaaa990
007007009aa6000a55550555044444405055055050550550444884746ccc7c76677bb7763044466646664440304444444444444444444440097aaaaaaaaaaa90
000000009aa60a0905005555022aa2200051000050550000044884706cc7cc60067bb760304464444444644030444444444444444444444009aaaaaaaaaaaa90
00000000aa060a0950555555044444400011011050550110044004700666660000666600304000044400004030400004444444444400004009aaaaaaaaaaaa90
333333333333333333333333900000094440000755555555000000003300003300000000333330000000333309090009000000009999099909aaaaaaaaaaaa90
333333333333333333000033004444004440660655555555000000003077aa03000000003330044444400033090009090990aa099990009909aaaaaaaaaaaa90
333333333333333330aabb030488884000006d0055555555000000000aaa0990000000003304444448894403000a0900000000009990a09909aaaaaaaaaaa990
33333e33333333330aabb8b0098888900dd0dd055555555500000000070770a0000000003044448989aa9440040a000a0404409999009009099aaaaaaaa99990
3333eae3333333330bebbbb0048888400d50000555555555000000000999999000000000304898999aaa944004000a0a04000000990a000990099aaaa9999009
33333e33333333330bbbb2b0048888400550550555555555000000000aaa099000000000304444489889444000040a0000090aa099000900a990099a99900997
33333333333333330b8bb330022aa22000005505555555550000000009044440000000003044444444444440090400040909000090090aa0aaa990099009977a
333333333333333330bb33030444444001105505555555550000000030a999030000000030400004440000400900090409000a0a90a00a00aaaaa90000977aaa
3333333333333333333333330000000000000000000000003333333300000000000000003333300000003333000a0a000090400000000000aaaaaa90097aaaaa
3333333333383333333003330000000000000000000000003300003300000000000000003330044444400033090a00099000409000000000aaaaaa9009aaaaaa
33c33333338888833307603300000000000000000000000030bb7b03000000000000000033044444444444030900040990a0009000000000aaaaaa9009aaaaaa
3cac3e33338338833076d6030000000000000000000000000b7bb3300000000000000000304467ccccccc4400009040000a0a00000000000aaaaaa9009aaaaaa
33c3eae33383e888306dd5030000000000000000000000000bbb3b30000000000000000030446666666664400a09000a4000a0a000000000aaaaaa9009aaaaaa
33333e3333388e83306dd50300000000000000000000000030333303000000000000000030446444644464400a00040a409000a000000000aaaaaa9009aaaaaa
3333333333333333305d52030000000000000000000000003302203300000000000000003044444444444440000904000090400000000000aaaaaa9009aaaaaa
33333333333333333333333300000000000000000000000033042033000000000000000030400004440000400a090009a00040a000000000aaaaaa9009aaaaaa
333333333444444334434343333330330000000000000000000000000000000000000000304000044407c0400a000a090a000a00000000000000000000000000
33333333444446444444444433300b03000000000000000000000000000000000000000030400604440cc04000090a0000090a0990440aa00000000000000000
33c333333464444344644464300b00b0000000000000000000000000000000000000000030400004440000400409000a04090000000000000000000000000000
3cac333344446444444444440b00b0b0000000000000000000000000000000000000000030400004444444400400090a04000aa0990aa0990000000000000000
33c33333444444444444444430b0b030000000000000000000000000000000000000000035353535353535350009090000000000000000000000000000000000
33333333346444434644444430b03030000000000000000000000000000000000000000033535353535353530a09000a0a0990aa044099040000000000000000
33333333444446444444446430303030000000000000000000000000000000000000000033353535353535330a000a0a0a000000000000000000000000000000
333333333444444334343343333333330000000000000000000000000000000000000000333333333333333300040a000aa0440990aa0aa00000000000000000
00000077000000773333333333333333333333330000000000000000000000008888888889988998899889980000000000000000000000000000000000000000
11100077100000773333e33333333333333355530000000000000000000000008998899889444498894444980000000000000000000000000000000000000000
2211007721000077333eae3333b33333335555530000000000000000000000008944449884404048844040480000000000000000000000000000000000000000
33311077310000773333e333333333b3355555530000000000000000000000008440404884444448844444480000000000000000000000000000000000000000
42211077421000773333b33333333333355555530000000000000000000000008444444818222288882222810000000000000000000000000000000000000000
55111077510000773333b3333b333333355555330000000000000000000000008122228888429481184294880000000000000000000000000000000000000000
66d51077651000773333b3333333b333335555330000000000000000000000001842948188888488884888880000000000000000000000000000000000000000
776d1077765100773333333333333333333333330000000000000000000000008848848888888888888888880000000000000000000000000000000000000000
88221077821000770000000000000000000000000000000000000000000000008888888800000000000000000000000000000000000000000000000000000000
94221077942100770000000000000000000000000000000000000000000000008448844800000000000000000000000000000000000000000000000000000000
a9421077a94210770000000000000000000000000000000000000000000000008444444800000000000000000000000000000000000000000000000000000000
bb331077b31000770000000000000000000000000000000000000000000000008444444800000000000000000000000000000000000000000000000000000000
ccd51077c10000770000000000000000000000000000000000000000000000008444444800000000000000000000000000000000000000000000000000000000
dd511077d10000770000000000000000000000000000000000000000000000008822228800000000000000000000000000000000000000000000000000000000
ee421077e21000770000000000000000000000000000000000000000000000001844248100000000000000000000000000000000000000000000000000000000
f9421077f51000770000000000000000000000000000000000000000000000008848848800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008899888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008894448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844048800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008822228800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008824918800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008884888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888998800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844498800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008840448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008822228800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008819428800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888488800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888998800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844498800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008840448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008844448800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008822228800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008819428800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008888488800000000000000000000000000000000000000000000000000000000
__gff__
0000010102020002000101010101000000000101020200010001010101010000000001000000010000010101010000000000000000000000000101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1c3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b2e3c2e2f2e2f2e2f2e2f2e2f2e2e1b02000000000000000000000000000002020002020202020000000000000003020202000000080303030308000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b0e0f0e0f0e0f0e0f0e0f0e0f0e0f2b02020202020202020202020000000002020000000000000002020202020202020200020000000000000000000002000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1e1f1c3d3d2e2f2e2f2e2f2e2f2e3b02000000000000000000000000000002020002020202020202000000000000020200000200000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
050e0f2b033d3d3d3d3d3d3d0e0f0e1b02000202020202020202020e0f000002020000000200000000000202020200020200000002000000000000020000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b1e1f3b2f2e3b131e1f1e3c1e1f1e2b02000002020000000000021e1f000002020000000000000200000200000000020200000000020000000002000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b0e0f1b0f0e1b2f2e2c2e2f2e2f2e3b0200000002000e0f0200020e0f000002020202020202020202020200020202020200000000000202060200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1e1f2b1f1e2b0f0e0f0e1c0e0f0e1b0200000000001e1f0200021e1f000002020000000000000000000000000000020200000000000200000200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b0e0f3b1c2e3c3d3d3d3d3d3d3d1e2b02020000000002020203020e0f000002020002020202020202020200000000020200000000000206020200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b1e1f1b0f0e0f0e1c2f2e2f2e3b2e3b02020200020000020202021e00000002020002020000000200000202020000020200000000000200000200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b0e0f2b1f1e1f1e3c0f040f0e1b0e1b02020200000000000402050000000002020002020002000205000200000000020200000000000202060200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b1e1f3c3d3d3d063d3d3d3d1e2b1e2b02020202020202020202020202000002020002020002000202000200000202020200000000000200000200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b0e0f0e0f0e0f0e0f0e0f1b2e3b2e3b02000000020002000000000000020002020002020002000000000200000000020200000000000206020200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1b1e1f1e1f1e1f1e1f1e1f2b0e0f0e1b02000700060006000202020200000002020002020002020202020202020000020200000000000200000200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b2e2f1c2f2e1c2e2f1c2f3c1c1f1e2b02000000020002000000000000020002020000000002020200000000000000020200000000000200000200000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d3d3d3d3d3d3d3d3d3d3d3d3d3d3b02020202020202020202020202020202020202020202020204020202020202020202020202020202050202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1212121212121212121212121212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1217301711171117111711171117111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211111111111011111111111111101200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1217111711171117110b0c0c0c0d111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
121111111111111111393a3a3a3a111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1212121212121131323211111111111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211301126121131111111261111111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211222211261131110b0d110b0d111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
122011111012113111393a11393a111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1212311212121131323232323232111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12113111292a113111090a11191a111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12113111393a113111393a11393a111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211313232323232323232323232111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211111111111031111111113011111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1211261111111131111126111111111200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1212121212121231071212121212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
